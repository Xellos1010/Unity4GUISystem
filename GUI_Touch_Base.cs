//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Farkle
//  @ Name: GUI_Touch.cs
//  @ 10/17/12 : 10/17/2012
//  @ Evan McCall : 
//
//

using UnityEngine;
using System.Collections;
using System;

public abstract class GUI_Touch_Base : MonoBehaviour
{
    /// <summary>
    /// The touch objects available to touch in the scene
    /// </summary>
    public GUITexture[] TouchObjects = new GUITexture[0] ;
    public GUIText[] TouchText = new GUIText[0];
    /// <summary>
    /// Enumerator functions to process when pressing a button
    /// </summary>
    public string[] EnumeratorFunctions = new string [0] ;

    /// <summary>
    /// Enables and Disables being able to touch something (Used when processing a function)
    /// </summary>
    public bool bManageTouch = true;

    /// <summary>
    /// Returns whether it is ok to touch or not
    /// </summary>
    public bool bTouch
    {
        get { return bManageTouch; }
    }

    /**********
    Start of the functions
     ***********/

    public virtual void Start()
    {
        bManageTouch = true;
        Debug.Log("Defaults Set for GUI_Touch_Base");
    }

    /// <summary>
    /// Resets variables to their original values
    /// </summary>
    public void Reset()
    {
        ToggleTouch(true);
    }

    /// <summary>
    /// This will toggle whether you can touch something on the screen or not
    /// </summary>
    /// <param name="OnOff"> On = True | Off = False</param>
    public void ToggleTouch(bool OnOff)
    {
        Debug.Log("Touch Toggle is " + OnOff);
        bManageTouch = OnOff;
    }

    /// <summary>
    /// Runs the string function passed through and checks if the function is in the EnumeratorFunctions string in this script
    /// </summary>
    /// <param name="Function">Function to pas checked and passed</param>
    /// <returns>Yield Command to start coroutine if needed</returns>
    public virtual IEnumerator RunFunction(string Function)
    {
        Debug.Log("Run Function "+Function+" has been executed");
        bool bExecute = false;
        foreach (string S in EnumeratorFunctions)
        {
            Debug.Log(S);
        }
        foreach (string S in EnumeratorFunctions)
        {
            if (S.Contains(Function) || Function.Contains(S))
            {
                ToggleTouch(false);
                Debug.Log(S);
                StartCoroutine(S);
                bExecute = true;
                break;
            }
        }
        if (!bExecute)
        {
            Debug.Log("The function " + Function + " is not a valid function to string ");
            Reset();
        }
        return null;
    }

    public virtual void OnMouseUp()
    {
        Debug.Log("Executed Mouse up in GUI_Touch.cs");
        if (bManageTouch)
        {
            Statics.SoundManager.PlayOneShot(Statics.SoundManager.SoundEffectClips[0]);
            foreach (GUITexture G in TouchObjects)
            {
                if (G.HitTest(Input.mousePosition))
                {
                    Debug.Log("The button hit was " + G.name);
                    if (G.gameObject.name.Contains("GUI_"))
                    {
                        string s = G.gameObject.name.Remove(0, 4);
                        StartCoroutine("RunFunction", s);
                        break;
                    }
                }
            }
        }
    }

    #if (UNITY_IPHONE || UNITY_ANDROID)
	public virtual void Update()
	{
        if (Input.GetKeyUp(KeyCode.Space))
        {
            Debug.Log(bManageTouch);
        }
        if (bManageTouch)
        {
            int count = Input.touchCount;
            if(count < 2)
            {
                Statics.SoundManager.PlayOneShot(Statics.SoundManager.SoundEffectClips[0]);
                for (int i = 0; i < count; i++)
                {
                    Touch touch = Input.GetTouch(i);
                    foreach (GUITexture G in TouchObjects)
                    {
                        if (G.HitTest(touch.position))
                        {
                            Debug.Log("The button hit was "+G.name);
                            if (touch.phase == TouchPhase.Ended)
                            {
                                if (G.gameObject.name.Contains("GUI_"))
                                {
                                    string s = G.gameObject.name.Remove(0, 4);
                                    StartCoroutine("RunFunction", s);
                                    break;
                                }
                            }
                        }
                    }
                }
            }
		}
	}
#endif    
}

